user root;
worker_processes 5;
worker_rlimit_nofile 8192;

events {
  worker_connections  4096;
}

http {
    include /etc/nginx/mime.types;

    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/etc/nginx/nginx-lua-prometheus/?.lua";
    init_by_lua '
      prometheus = require("prometheus").init("prometheus_metrics")
      metric_requests = prometheus:counter(
        "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
      metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
      metric_connections = prometheus:gauge(
        "nginx_http_connections", "Number of HTTP connections", {"state"})
    ';
    log_by_lua '
      metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
      metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
    ';

    server {
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log warn;

        listen 80;

        location /asset {
            root /data;
            rewrite ^/(.*)/$ /$1 permanent;
            error_page 404 = @master_node;
        }

        location @master_node {
            proxy_pass http://localhost:8000;
        }

        location /metrics {
            content_by_lua '
                metric_connections:set(ngx.var.connections_reading, {"reading"})
                metric_connections:set(ngx.var.connections_waiting, {"waiting"})
                metric_connections:set(ngx.var.connections_writing, {"writing"})
                prometheus:collect()
            ';
        }
    }
}